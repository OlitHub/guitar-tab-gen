08/10/2024
Learn about transformers. Try a DadaGP model to generate something and turn it to a score.

----------------------------------------------------------------------------------------------------------------------------

16/10/2024
Tested DadaGP model on free generation.
I should try to better understand Pedro's code and generate only a bass guitar score if it is possible.
I can try to modify the prompt to generate only bass guitar scores.
Or I can put the probabilities of the tokens that are not bass guitar notes to zero.
This will give us a baseline.

Also try to generate specific style of music using the artist in the prompt.

How does DadaGP sample?
Also, read GTR-CTRL paper and try to understand the model.

I may have to retrain the model on bass guitar scores only or to at least fine-tune the model on bass guitar scores.
This will give us a better baseline.
I should create a kaggle or colab notebook for the training and inference as I will need computational resources.
Colab can connect to a github repository and I can use the free GPU provided by google.

----------------------------------------------------------------------------------------------------------------------------

22/10/2024

Tried understanding the code from the DadaGP checkpoint. DadaGP seems to be a TransformerXL extended with MemTransformerLM.
Ask Pedro about this.

I tried generating an only bass guitar score using the prompt but it doesn't seem possible just like that.
My prompt was to start the generation with a note of bass guitar only. It delays the appearance of other instruments but they still appear after a while.
I also tried generating in the style of the Beatles as there is a consistent dataset of their songs.

GTR-CTRL:
CTRL model does conditional generation using categorization tokens appended to text sequences.

Look at pkl files of the vocabulary in a notebook, retrieve the unwanted instruments tokens and set their probabilities to 0 in the logits.
--> baseline

Look at github CP Drums Generation and their model to understand how the conditional information is given to the decoder.

08/11/2024

I generated some baselines by setting the logits of the other instruments to 0 but it wasn't great.
--> We need to try something else.

Look at dadagp.py and modify it to output a new token text version of the gp files.
Look at the mapping between int and instruments in pyguitarpro
We should have token text files for each instruments of the track
so that we can choose which instruments we use to condition the bass:

Especially, we need one with the rythmic guitar, and one with the drums.

Then we of course need one with the bass guitar (input and testing output).

Once we successfully have this training data, we will try the model from the CP Drums Generation article on it.
(BiLSTM + Word Decoder)

13/11/2024

Generating the txt tokens file using a notebook.

Add a function to cumulate the consecutive waits.
Add the instruments to keep as a parameter of the function!
Try to apply the notebook to a large number of files.
Output the generated files in a separate folder.

22/11/2024

Finished the function to generate the token text files of the instruments asked.

Send the DadaGP model to Alexandre using filesender.

Review the part that that filters the tracks that don't contain the instruments asked
(At the moment it only removes the track if ALL the tracks of the group don't contain the instruments.)
Select the combination of instruments we want to ouput. Do the computation on the ssh servers?

To select the combination we identify the rythmic guitar to be able to condition on it.
Look at the CSV file provided by Alexandre, analyze it and select for each track the rythmic guitars.
(We could keep the guitars that have the most rythmic measures or set a threshold on the percentage of rythmic measures)

Potential issue: The parts' name in the csv are not the instruments' name in DadaGP!
Prepare the code as if we had the track name in the CSV.

We also could try to identify the genre of the artists and add a token for it.
This would allow us to condition the generation on the genre.

Next step, look at the BiLSTM code from the CP Drums Generation article.


29/11/2024

The function now correctly checks if the track contains the instruments asked before processing it.
However it adds time to the processing of the files instead of optimizing it.
Should we just process all the files and then filter the ones that contain the instruments asked?
The thing is that we don't want to have files full of wait tokens in the training data.

Checked the csv file containing the rythmic instrument at each measure of each track of dadagp dataset.
Added a column 'dadagp-name' to the csv file to match the name of the instruments to the ones used in dadagp.
The thing is I have no idea if the order of the instruments in the csv file is the same as in the gp files...
So I may be mapping wrong instruments together.
How could I check that? (Maybe the only solution is going back through the gp files...)

Now also remains the question of choosing the rythmic guitar in each track.
How can we proceed?
For each measure of each track, take the instrument that has the highest rg-estimation?
First set a threshold on the rg-estimation to consider an instrument as rythmic?
For the moment I took the threshold of the paper (0.5)


Track_name is not unique! Clean it using file name!
To retrieve the real track name from the file name, perform a split on the dash (-)
Also clean file name by removing the extension and the beginning of the path.

The idea:
Iterate on the files in gp5, iterate on tracks names, find the csv rows that correspond to the instrument,
look at the value in the Instrument column, add column Dadagp_name that is instrument name with number appended.
The number is reset at each new track.

Optimize the function that finds the rythmic guitar in the track.
Try lineprofiler to find the lines that slow the loop.

Issue with selecting only the best rythmic instrument in terms of proportion:
A guitar can play much less measures but have a higher prop than
another guitar that is rythmic almost everywhere but in certain measures.

It would be better to put a threshold and accept the fact that there can be several rythmic guitars?
For the moment keep it like this, and keep prop_rythmic column in the csv.
Or find a better way to select the rythmic guitar.
--> Instead of making proportion on the number of measures of the instrument,
make it on the number of measures of the track.

Once I have the correct column track_name, run notebook again.


6/12/2024


Trying to retrieve the correct track name. I have a first issue with the elements in 'Fichier'.
We thought they were of the form path/author - track_name - part_name.gpif so we could split on the dash and the \ to retrieve only author - track_name.
However, in some cases author is not present, or part_name is not present. For the moment I just remove the rows that don't have the correct format.
I also have an issue with the extension, some are gp3, some are gp4.
Another issue: artist name can be different in the csv file and in dadagp (ACDC and AC-DC for instance)

Maybe I am not taking things the right way?
--> It would be easier to iterate on dadagp and find back the csv rows that correspond instead of iterating on the csv.

It doesn't work better at all...


11/12/2024


The issue comes from the way I retrieve the Author and the track name.
If there are dashes in the author or track name it causes errors.

To get the correct dadagp file name, remove the beginning of the path and the extension.
Then I am supposed to have filename - partname, but in some cases there are no partnames.
I should try to split on the last dash, and if it doesn't work, keep the whole string as the filename.
Other solution: look if there are several parts for the same track, if there are, do the split, else keep the whole string.

17/12/2024

I tried to implement a way to add a column Num_Parts that would contain the number of parts in the track of the row, for each row.
However I had issue to find how to group the dataset to get this information: Track_Name is not always filled and Fichier is unique per track.
For instance, track None\nNone had 308 parts...

To avoid using Num_Parts I am now simply checking if there are two dashes or more in the filename to know if I should split on the dashes or not.
With this method I still have some issues if there is a dash in the author or track name but no parts.
In this case I slice in between the author or the track name.

